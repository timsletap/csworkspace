import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class Zoo {
	Queue<String> list;
	
	public Zoo() {
		list = new LinkedList<String>();
		list.offer("bear");
		list.offer("camel");
		list.offer("donkey");
		list.offer("emu");
		list.offer("gnu");
		list.offer("monkey");
		list.offer("orangutan");
		list.offer("zebra");
		list.offer("picost");
		list.offer("henway");
		
	}
	public void displayList() {
		System.out.println(list);
	}
	
	public void removeEveryOther() {
		int x = list.size();
		for(int i = 0; i < x; i++) {
			if(i % 2 == 1) {
				list.poll();
			} else {
				list.offer(list.poll());
			}
		}
	}
		
		// Returns a new queue that is the clone of one.
		public static Queue<String> clone(Queue<String> one) {
			Queue<String> temp = new LinkedList<String>();
			for (String x : one)
				temp.offer(x);

			return temp;
		}

		

		public static Queue<String> reverse(Queue<String> x) {
			Queue<String> reversedQueue = new LinkedList<String>();
	        while (!x.isEmpty()) {
	            ((LinkedList<String>) reversedQueue).addFirst(x.poll());
	        }

	        return reversedQueue;
			}
		

		

		public static Queue<String> alternate(Queue<String> one, Queue<String> two) {
		    Queue<String> temp = clone(one);
		    Queue<String> temp2 = clone(two);
		    Queue<String> newQue = new LinkedList<String>();
		    while (temp.size() != 0 && temp2.size() != 0) {
		        newQue.offer(temp.poll());
		        newQue.offer(temp2.poll());
		    }
		    if (temp.size() > temp2.size()) {
		        for (int i = 0; i < temp.size(); i++) {
		            newQue.offer(temp.poll());
		        }
		    } else {
		        for (int i = 0; i < temp2.size(); i++) {
		            newQue.offer(temp2.poll());
		        }
		    }
		    return newQue;
		}
			
			
		

		// add Queue y to the end of Queue x+
		public static Queue<String> append(Queue<String> x, Queue<String> y) {
			Queue<String> temp = clone(x);
			Queue<String> temp2 = clone(y);
			for(int i = 0; i < temp2.size(); i++) {
				temp.offer(temp2.poll());
			}
			return temp;
		}

		

		public static boolean isPalindrome(Queue<String> x) {
			Queue<String> temp = reverse(x);
			return x.equals(temp);
		}

		

		public static boolean isAlphabetical(Queue<String> x) {
			Queue<String> temp = clone(x);
			
			while(temp.size() > 1) {
				if(temp.poll().compareTo(temp.peek()) > 0) {
					return false;
				}
			}
			
			return true;
		}

		
		public static double getAverage(Queue<Integer> one) {
			double avg = 0;
			int count = 0;
			for(int i = 0; i < one.size(); i++) {
				avg += one.poll();
				count++;
			}
			return avg/count;
				
		}
		
		public static String generateBinary(int n) {
			Queue<String> temp = new LinkedList<Integer>();
			for(int i = 1; i <= n; i++) {
				temp.offer(i+"");
			}
			
			while(temp.size() > 1) {
				temp.offer(temp.poll());
				temp.offer(temp.poll());
				temp.offer(temp.poll());
				
			}
			return temp.poll();
			}
		
		public static int getTapPosition(int count){
			
			
			
		}
		
			
		

	public static void main(String[] args) {
	        Zoo zoo = new Zoo();

	        
	        System.out.println("Original List:");
	        zoo.displayList();

	       
	        zoo.removeEveryOther();
	        System.out.println("\nList after removing every other element:");
	        zoo.displayList();

	        
	        Queue<String> reversedQueue = Zoo.reverse(zoo.list);
	        System.out.println("\nReversed List:");
	        System.out.println(reversedQueue);

	      
	        Queue<String> anotherZoo = new LinkedList<>();
	        anotherZoo.offer("tiger");
	        anotherZoo.offer("elephant");
	        Queue<String> alternatedQueue = Zoo.alternate(zoo.list, anotherZoo);
	        System.out.println("\nAlternated List:");
	        System.out.println(alternatedQueue);

	        
	        Queue<String> appendedQueue = Zoo.append(zoo.list, anotherZoo);
	        System.out.println("\nAppended List:");
	        System.out.println(appendedQueue);

	       
	        System.out.println("\nIs the original list a palindrome? " + Zoo.isPalindrome(zoo.list));

	        
	        System.out.println("\nIs the original list in alphabetical order? " + Zoo.isAlphabetical(zoo.list));

	       
	        Queue<Integer> integerQueue = new LinkedList<>();
	        integerQueue.offer(5);
	        integerQueue.offer(10);
	        integerQueue.offer(15);
	        System.out.println("\nAverage of the integer queue: " + Zoo.getAverage(integerQueue));
	        
	        System.out.println(generateBinary(13));

	       
	    }
	
	}


