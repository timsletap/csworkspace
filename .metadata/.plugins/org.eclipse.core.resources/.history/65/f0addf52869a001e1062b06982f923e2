import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

public class Zoo {
	Queue<String> list;
	
	public Zoo() {
		list = new LinkedList<String>();
		list.offer("bear");
		list.offer("camel");
		list.offer("donkey");
		list.offer("emu");
		list.offer("gnu");
		list.offer("monkey");
		list.offer("orangutan");
		list.offer("zebra");
		list.offer("picost");
		list.offer("henway");
		
	}
	public void displayList() {
		System.out.println(list);
	}
	
	public void removeEveryOther() {
		int x = list.size();
		for(int i = 0; i < x; i++) {
			if(i % 2 == 1) {
				list.poll();
			} else {
				list.offer(list.poll());
			}
		}
	}
		
		// Returns a new queue that is the clone of one.
		public static Queue<String> clone(Queue<String> one) {
			Queue<String> temp = new LinkedList<String>();
			for (String x : one)
				temp.offer(x);

			return temp;
		}

		

		public static Queue<String> reverse(Queue<String> x) {
			Queue<String> temp = clone(x);
			for(int i = 0; i < x.size(); i--) {
				temp.offer(temp.poll());
			}
			return temp;
		}
		

		

		public static Queue<String> alternate(Queue<String> one, Queue<String> two) {
			Queue<String> temp = clone(one);
			Queue<String> temp2 = clone(two);
			Queue<String> newQue = new LinkedList<String>();
			while(temp.size() != 0 && temp2.size() != 0) {
				newQue.offer(temp.poll());
				newQue.offer(temp2.poll());
			}
			if(temp.size() > temp2.size()) {
				for(int i = 0; i < temp2.size(); i++) {
					newQue.offer(temp.poll());
				}
			} else {
					for(int i = 0; i < temp2.size(); i++) {
						newQue.offer(temp2.poll());
				}
					
				}
			return newQue;
			}
			
			
		

		// add Queue y to the end of Queue x+
		public static Queue<String> append(Queue<String> x, Queue<String> y) {
			Queue<String> temp = clone(x);
			Queue<String> temp2 = clone(y);
			for(int i = 0; i < temp2.size(); i++) {
				temp.offer(temp2.poll());
			}
			return temp;
		}

		

		public static boolean isPalindrome(Queue<String> x) {
			Queue<String> temp = reverse(x);
			return x.equals(temp);
		}

		

		public static boolean isAlphabetical(Queue<String> x) {
			Queue<String> temp = clone(x);
			String s = temp.poll();
			for(String i : x) {
				if(i.compareTo(s) > 0) {
					return false;
					
				}
				s = temp.poll();
			}
			
			return true;
		}

		
		public static double getAverage(Queue<Integer> one) {
			double avg = 0;
			for(int i = 0; i < one.size(); i++) {
				avg += one.poll();
			}
			return avg/one.size();
				
		}
			
		

	public static void main(String[] args) {
		Zoo temp = new Zoo();
		temp.displayList();
		System.out.println(isAlphabetical(temp.list));
		

	}

}
